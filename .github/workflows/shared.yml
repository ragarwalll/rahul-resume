name: shared

on:
  workflow_call:
    inputs:
      main_document:
        description: 'Main LaTeX document to build'
        required: true
        type: string
      working_directory:
        description: 'Directory containing LaTeX files'
        required: false
        default: '.'
        type: string
      artifact-name:
        description: 'Name of the artifact to download'
        required: false
        type: string
    outputs:
      data_generated:
        description: 'Flag indicating if python data was generated'
        value: ${{ jobs.python-check-and-build.outputs.data_generated }}
      format_errors:
        description: 'Number of files with formatting errors'
        value: ${{ jobs.latex-check-and-build.outputs.format_errors }}
      lint_errors:
        description: 'Number of files with linting errors'
        value: ${{ jobs.latex-check-and-build.outputs.lint_errors }}
      lint_warnings:
        description: 'Number of files with linting warnings'
        value: ${{ jobs.latex-check-and-build.outputs.lint_warnings }}
      total_files:
        description: 'Total number of files processed'
        value: ${{ jobs.latex-check-and-build.outputs.total_files }}
      artifact_url:
        description: 'URL to download the generated PDF'
        value: ${{ jobs.latex-check-and-build.outputs.artifact_url }}
      python_logs_artifact_url:
        description: 'URL to download the Python logs'
        value: ${{ jobs.python-check-and-build.outputs.python_logs_artifact_url }}

permissions:
  actions: read
  contents: read

jobs:
  python-check-and-build:
    runs-on: ubuntu-latest
    outputs:
      data_generated: ${{ steps.python-run.outputs.data_generated }}
      python_logs_artifact_url: ${{ steps.upload_python_logs.outputs.artifact-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry --directory vitagen install

      - name: Check formatting with black
        run: poetry --directory vitagen run pylint **/*.py

      - name: Check formatting with black
        run: poetry --directory vitagen run black --check .

      - name: Download Generated TEX
        if: ${{ inputs.artifact-name != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.working_directory }}

      - name: Run Python script
        id: python-run
        run: |
          # Create log directory if it doesn't exist
          mkdir -p logs
          {
            poetry --directory vitagen run start-module --input $GITHUB_WORKSPACE/data.json --output $GITHUB_WORKSPACE/processor/python-data.tex
          } 2>&1 | tee logs/python_script.log

          poetry --directory vitagen run start-module --input $GITHUB_WORKSPACE/data.json --output $GITHUB_WORKSPACE/processor/python-data.tex

          if [ -f processor/python-data.tex ]; then
            echo "data_generated=true" >> $GITHUB_OUTPUT
            
            # Upload success logs as artifact
            echo "logs_path=logs/python_script.log" >> $GITHUB_OUTPUT
            
            echo "✅ Successfully generated python-data.tex"
          else
            echo "❌ python-data.tex was not generated"
            echo "data_generated=false" >> $GITHUB_OUTPUT
            
            # Upload failure logs as artifact
            echo "logs_path=logs/python_script.log" >> $GITHUB_OUTPUT

            exit 1
          fi

      - name: Upload logs
        if: always()
        id: upload_python_logs
        uses: actions/upload-artifact@v4
        with:
          name: python-script-logs
          path: logs/python_script.log
          retention-days: 7

      - name: Upload Generated TEX
        if: steps.python-run.outputs.data_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-data-tex
          path: processor/python-data.tex
          retention-days: 7

      - name: Generate Python Summary
        if: always()
        run: |
          if [ "${{ steps.python-run.outputs.data_generated }}" == "true" ]; then
            echo "✓ python run was successful" >> $GITHUB_STEP_SUMMARY
            echo "&nbsp;&nbsp;→ \`generated\`: processor/python-data.tex" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ python run was unsuccessful" >> $GITHUB_STEP_SUMMARY
            echo "&nbsp;&nbsp;→ \`cause\`: failed to generate processor/python-data.tex" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Python logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: python-logs
          path: |
            vitagen/vitagen/*.log
            ./*.log
          retention-days: 7

  latex-check-and-build:
    needs: [python-check-and-build]
    runs-on: ubuntu-latest
    outputs:
      format_errors: ${{ steps.format.outputs.format_errors }}
      lint_errors: ${{ steps.lint.outputs.lint_errors }}
      lint_warnings: ${{ steps.lint.outputs.lint_warnings }}
      total_files: ${{ steps.find-tex.outputs.file_count }}
      artifact_url: ${{ steps.upload_pdf.outputs.artifact-url }}
    container:
      image: ghcr.io/xu-cheng/texlive-full:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find and validate config files
        id: config
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Check for latexindent config
          if [ -f latexindent.yaml ]; then
            echo "indent_config=latexindent.yaml" >> $GITHUB_OUTPUT
            echo "✅ Found latexindent.yaml"
          else
            echo "⚠️ No latexindent.yaml found, will use default settings"
          fi

          # Check for chktex config
          if [ -f .chktexrc ]; then
            echo "chktex_config=.chktexrc" >> $GITHUB_OUTPUT
            echo "✅ Found .chktexrc"
          else
            echo "⚠️ No .chktexrc found, will use default settings"
          fi

      - name: Find all TeX files
        id: find-tex
        working-directory: ${{ inputs.working_directory }}
        run: |
          files=$(find . -type f \( -name "*.tex" -o -name "*.cls" \) \
            ! -path "./node_modules/*" \
            ! -path "./build/*" \
            ! -path "./dist/*" \
            ! -path "./_minted-*/*" \
            -print)

          echo "$files" > tex_files.txt
          count=$(echo "$files" | wc -l)
          echo "file_count=$count" >> $GITHUB_OUTPUT
          echo "Found $count TeX files to process"

      - name: Run LaTeX formatting check
        id: format
        working-directory: ${{ inputs.working_directory }}
        run: |
          format_errors=0
          total_files=$(cat tex_files.txt | wc -l)

          echo "=== Running Formatter ==="
          while IFS= read -r file; do
            echo -e "\nChecking format of $file..."
            
            # Prepare command with or without config
            if [ "${{ steps.config.outputs.indent_config }}" != "" ]; then
              indent_cmd="latexindent -kv -s -l ${{ steps.config.outputs.indent_config }}"
            else
              indent_cmd="latexindent -kv -s"
            fi
            
            # Run formatting check
            if ! $indent_cmd "$file"; then
              echo "❌ Formatting issues in $file"
              format_errors=$((format_errors + 1))
            else
              echo "✅ $file is properly formatted"
            fi
          done < tex_files.txt

          # Store statistics
          echo "format_errors=$format_errors" >> $GITHUB_OUTPUT
          echo "total_files=$total_files" >> $GITHUB_OUTPUT

          if [ $format_errors -gt 0 ]; then
            echo "❌ Found formatting issues in $format_errors files"
            exit 1
          fi

      - name: Run LaTeX linting
        id: lint
        working-directory: ${{ inputs.working_directory }}
        run: |
          lint_errors=0
          lint_warnings=0

          echo "=== Running Linter ==="
          while IFS= read -r file; do
            echo -e "\nLinting $file..."
            
            # Create directory for log file if it doesn't exist
            log_dir=$(dirname "lint_${file}.log")
            mkdir -p "$log_dir"
            
            # Prepare command with or without config
            if [ "${{ steps.config.outputs.chktex_config }}" != "" ]; then
              chktex_cmd="chktex -l ${{ steps.config.outputs.chktex_config }}"
            else
              chktex_cmd="chktex"
            fi
            
            # Run linting and capture both stdout and stderr
            if ! $chktex_cmd "$file" > "lint_${file}.log" 2>&1; then
              echo "⚠️ Linting issues found in $file"
              cat "lint_${file}.log"
              if grep -q "Error" "lint_${file}.log"; then
                lint_errors=$((lint_errors + 1))
              else
                lint_warnings=$((lint_warnings + 1))
              fi
            else
              echo "✅ No linting issues in $file"
            fi
          done < tex_files.txt

          # Store statistics
          echo "lint_errors=$lint_errors" >> $GITHUB_OUTPUT
          echo "lint_warnings=$lint_warnings" >> $GITHUB_OUTPUT

          if [ $lint_errors -gt 0 ]; then
            echo "❌ Found $lint_errors linting errors"
            exit 1
          fi

          if [ $lint_warnings -gt 0 ]; then
            echo "⚠️ Found $lint_warnings linting warnings"
            exit 1
          fi

      - name: Download Generated TEX
        uses: actions/download-artifact@v4
        with:
          name: python-data-tex
          path: processor/

      - name: Build PDF with XeLaTeX
        id: build-pdf
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Clean any existing auxiliary files
          rm -f *.aux *.log *.out *.pdf

          # Run latexmk with increased verbosity
          latexmk -xelatex \
            -interaction=nonstopmode \
            -file-line-error \
            -verbose \
            ${{ inputs.main_document }}

      - name: Upload PDF artifact
        id: upload_pdf
        if: steps.build-pdf.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: pdf-output
          path: ${{ inputs.working_directory }}/*.pdf
          if-no-files-found: error
          retention-days: 7

      - name: Generate Build Summary
        if: always()
        env:
          FORMAT_ERRORS: ${{ steps.format.outputs.format_errors }}
          LINT_ERRORS: ${{ steps.lint.outputs.lint_errors }}
          LINT_WARNINGS: ${{ steps.lint.outputs.lint_warnings }}
          PDF_EXIT_CONCLUSION: ${{ steps.build-pdf.conclusion }}
          PYTHON_STATUS: ${{ needs.python-check-and-build.outputs.data_generated }}
          TOTAL_FILES: ${{ steps.find-tex.outputs.file_count }}
        run: |
          # Add status banner
          if [ "$FORMAT_ERRORS" = "0" ] && [ "$LINT_ERRORS" = "0" ] && [ "$LINT_WARNINGS" = "0" ] && [ "$PDF_EXIT_CONCLUSION" = "success" ] && [ "$PYTHON_STATUS" = "true" ]; then
            echo "✓ pdf build was successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ pdf build failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "&nbsp;&nbsp;→ \`total files processed\`: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "&nbsp;&nbsp;→ \`pdf build status\`: $PDF_EXIT_CONCLUSION" >> $GITHUB_STEP_SUMMARY

          if [ "$PYTHON_STATUS" = "true" ]; then
            echo "&nbsp;&nbsp;→ \`processing by python\`: success" >> $GITHUB_STEP_SUMMARY
          else
            echo "&nbsp;&nbsp;→ \`processing by python\`: failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "&nbsp;&nbsp;→ \`formatting issues\`: $FORMAT_ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "&nbsp;&nbsp;→ \`linting issues\`: $LINT_ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "&nbsp;&nbsp;→ \`linting issues\`: $LINT_ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "&nbsp;&nbsp;→ \`linting warnings\`: $LINT_WARNINGS" >> $GITHUB_STEP_SUMMARY

          if [ "$FORMAT_ERRORS" = "0" ] && [ "$LINT_ERRORS" = "0" ] && [ "$LINT_WARNINGS" = "0" ] && [ "$PDF_EXIT_CONCLUSION" = "success" ] && [ "$PYTHON_STATUS" = "true" ]; then
            echo "&nbsp;&nbsp;→ \`generated\`: pdf build artifact" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload logs on failure
        if: ${{ failure() || steps.build-pdf.conclusion == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: latex-logs
          path: |
            ${{ inputs.working_directory }}/*.log
            ${{ inputs.working_directory }}/lint_*.log
          retention-days: 7
