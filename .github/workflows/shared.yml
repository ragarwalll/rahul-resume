name: shared

on:
  workflow_call:
    inputs:
      main_document:
        description: "Main LaTeX document to build"
        required: true
        type: string
      working_directory:
        description: "Directory containing LaTeX files"
        required: false
        default: "."
        type: string

permissions:
  actions: read
  pull-requests: write
  contents: read

jobs:
  format-and-lint:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/xu-cheng/texlive-full:latest
    outputs:
      format_errors: ${{ steps.format.outputs.format_errors }}
      lint_errors: ${{ steps.lint.outputs.lint_errors }}
      lint_warnings: ${{ steps.lint.outputs.lint_warnings }}
      total_files: ${{ steps.find-tex.outputs.file_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find and validate config files
        id: config
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Check for latexindent config
          if [ -f latexindent.yaml ]; then
            echo "indent_config=latexindent.yaml" >> $GITHUB_OUTPUT
            echo "‚úÖ Found latexindent.yaml"
          else
            echo "‚ö†Ô∏è No latexindent.yaml found, will use default settings"
          fi

          # Check for chktex config
          if [ -f .chktexrc ]; then
            echo "chktex_config=.chktexrc" >> $GITHUB_OUTPUT
            echo "‚úÖ Found .chktexrc"
          else
            echo "‚ö†Ô∏è No .chktexrc found, will use default settings"
          fi

      - name: Find all TeX files
        id: find-tex
        working-directory: ${{ inputs.working_directory }}
        run: |
          files=$(find . -type f \( -name "*.tex" -o -name "*.cls" \) \
            ! -path "./node_modules/*" \
            ! -path "./build/*" \
            ! -path "./dist/*" \
            ! -path "./_minted-*/*" \
            -print)

          echo "$files" > tex_files.txt
          count=$(echo "$files" | wc -l)
          echo "file_count=$count" >> $GITHUB_OUTPUT
          echo "Found $count TeX files to process"

      - name: Run LaTeX formatting check
        id: format
        working-directory: ${{ inputs.working_directory }}
        run: |
          format_errors=0
          total_files=$(cat tex_files.txt | wc -l)

          echo "=== Running Formatter ==="
          while IFS= read -r file; do
            echo -e "\nChecking format of $file..."
            
            # Prepare command with or without config
            if [ "${{ steps.config.outputs.indent_config }}" != "" ]; then
              indent_cmd="latexindent -kv -s -l ${{ steps.config.outputs.indent_config }}"
            else
              indent_cmd="latexindent -kv -s"
            fi
            
            # Run formatting check
            if ! $indent_cmd "$file"; then
              echo "‚ùå Formatting issues in $file"
              format_errors=$((format_errors + 1))
            else
              echo "‚úÖ $file is properly formatted"
            fi
          done < tex_files.txt

          # Store statistics
          echo "format_errors=$format_errors" >> $GITHUB_OUTPUT
          echo "total_files=$total_files" >> $GITHUB_OUTPUT

          if [ $format_errors -gt 0 ]; then
            echo "‚ùå Found formatting issues in $format_errors files"
            exit 1
          fi

      - name: Run LaTeX linting
        id: lint
        working-directory: ${{ inputs.working_directory }}
        run: |
          lint_errors=0
          lint_warnings=0

          echo "=== Running Linter ==="
          while IFS= read -r file; do
            echo -e "\nLinting $file..."
            
            # Create directory for log file if it doesn't exist
            log_dir=$(dirname "lint_${file}.log")
            mkdir -p "$log_dir"
            
            # Prepare command with or without config
            if [ "${{ steps.config.outputs.chktex_config }}" != "" ]; then
              chktex_cmd="chktex -l ${{ steps.config.outputs.chktex_config }}"
            else
              chktex_cmd="chktex"
            fi
            
            # Run linting and capture both stdout and stderr
            if ! $chktex_cmd "$file" > "lint_${file}.log" 2>&1; then
              echo "‚ö†Ô∏è Linting issues found in $file"
              cat "lint_${file}.log"
              if grep -q "Error" "lint_${file}.log"; then
                lint_errors=$((lint_errors + 1))
              else
                lint_warnings=$((lint_warnings + 1))
              fi
            else
              echo "‚úÖ No linting issues in $file"
            fi
          done < tex_files.txt

          # Store statistics
          echo "lint_errors=$lint_errors" >> $GITHUB_OUTPUT
          echo "lint_warnings=$lint_warnings" >> $GITHUB_OUTPUT

          if [ $lint_errors -gt 0 ]; then
            echo "‚ùå Found $lint_errors linting errors"
            exit 1
          fi

          if [ $lint_warnings -gt 0 ]; then
            echo "‚ö†Ô∏è Found $lint_warnings linting warnings"
            exit 1
          fi

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: latex-logs-format-lint
          path: |
            ${{ inputs.working_directory }}/*.log
            ${{ inputs.working_directory }}/lint_*.log
  python-processing:
    runs-on: ubuntu-latest
    outputs:
      data_generated: ${{ steps.python-run.outputs.data_generated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è No requirements.txt found"
          fi

      - name: Run Python script
        id: python-run
        run: |
          echo "Running Python processing..."
          if [ -f processor/python/main.py ]; then
            python processor/python/main.py --input data.json --output processor/python-data.tex
            if [ -f processor/python-data.tex ]; then
              echo "data_generated=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Successfully generated python-data.tex"
            else
              echo "‚ùå python-data.tex was not generated"
              echo "data_generated=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ùå processor/python/main.py not found"
            echo "data_generated=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Generated TEX
        if: steps.python-run.outputs.data_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-data-tex
          path: processor/python-data.tex

      - name: Generate Python Summary
        if: always()
        run: |
          echo "# üêç Python Processing Report" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.python-run.outputs.data_generated }}" == "true" ]; then
            echo "### ‚úÖ Python Processing Status: Successful" >> $GITHUB_STEP_SUMMARY
            echo "- Successfully generated python-data.tex at processor/python-data.tex" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Python Processing Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- Failed to generate python-data.tex" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Python logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: python-logs
          path: |
            processor/python/*.log
            ./*.log

  latex-build:
    needs: [format-and-lint, python-processing]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/xu-cheng/texlive-full:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Generated TEX
        uses: actions/download-artifact@v4
        with:
          name: python-data-tex
          path: processor/

      - name: Build PDF with XeLaTeX
        id: build-pdf
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Clean any existing auxiliary files
          rm -f *.aux *.log *.out *.pdf

          # Run latexmk with increased verbosity
          latexmk -xelatex \
            -interaction=nonstopmode \
            -file-line-error \
            -verbose \
            ${{ inputs.main_document }}

      - name: Upload PDF artifact
        id: upload_pdf
        if: steps.build-pdf.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: pdf-output
          path: ${{ inputs.working_directory }}/*.pdf
          if-no-files-found: error

      - name: Generate Build Summary
        if: always()
        env:
          FORMAT_ERRORS: ${{ needs.format-and-lint.outputs.format_errors }}
          LINT_ERRORS: ${{ needs.format-and-lint.outputs.lint_errors }}
          LINT_WARNINGS: ${{ needs.format-and-lint.outputs.lint_warnings }}
          PDF_EXIT_CONCLUSION: ${{ steps.build-pdf.conclusion }}
          PYTHON_STATUS: ${{ needs.python-processing.outputs.data_generated }}
        run: |
          echo "# üìë LaTeX Build Report" >> $GITHUB_STEP_SUMMARY

          # Add status banner
          if [ "$FORMAT_ERRORS" = "0" ] && [ "$LINT_ERRORS" = "0" ] && [ "$LINT_WARNINGS" = "0" ] && [ "$PDF_EXIT_CONCLUSION" = "success" ] && [ "$PYTHON_STATUS" = "true" ]; then
            echo "### ‚úÖ Build Status: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Build Status: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## üìä Processing Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Files Processed | ${{ needs.format-and-lint.outputs.total_files }} | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY

          if [ "$PDF_EXIT_CONCLUSION" = "success" ]; then
            echo "| PDF Build | - | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| PDF Build Issue | 1 | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$PYTHON_STATUS" = "true" ]; then
            echo "| Python Processing | - | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Python Processing | Failed | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FORMAT_ERRORS" = "0" ]; then
            echo "| Formatting Issues | 0 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Formatting Issues | $FORMAT_ERRORS | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$LINT_ERRORS" = "0" ]; then
            echo "| Linting Errors | 0 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Linting Errors | $LINT_ERRORS | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$LINT_WARNINGS" = "0" ]; then
            echo "| Linting Warnings | 0 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Linting Warnings | $LINT_WARNINGS | ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FORMAT_ERRORS" = "0" ] && [ "$LINT_ERRORS" = "0" ] && [ "$LINT_WARNINGS" = "0" ] && [ "$PDF_EXIT_CONCLUSION" = "success" ] && [ "$PYTHON_STATUS" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## üìã Build Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ PDF has been generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "- The generated PDF is available in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const artifactName = 'pdf-output';
            const formatErrors = parseInt('${{ needs.format-and-lint.outputs.format_errors }}') || 0;
            const lintErrors = parseInt('${{ needs.format-and-lint.outputs.lint_errors }}') || 0;
            const lintWarnings = parseInt('${{ needs.format-and-lint.outputs.lint_warnings }}') || 0;
            const buildPdfFailed = '${{ steps.build-pdf.conclusion }}' === 'failure' ? 1 : 0;
            const pythonFailed = '${{ needs.python-processing.outputs.data_generated }}' !== 'true' ? 1 : 0;

            let status = '‚úÖ Build Successful';
            let color = '0E8A16'; // green
            let details = '';

            if (formatErrors > 0 || lintErrors > 0 || lintWarnings > 0 || buildPdfFailed > 0 || pythonFailed > 0) {
              status = '‚ùå Build Failed';
              color = 'D93F0B'; // red
              details = `
              ### Build Statistics
              - Total files processed: ${{ needs.format-and-lint.outputs.total_files }}
              - Python processing status: ${pythonFailed ? 'Failed' : 'Successful'}
              - PDF generation status: ${buildPdfFailed ? 'Failed' : 'Successful'}
              - Files with formatting issues: ${formatErrors}
              - Files with lint errors: ${lintErrors}
              - Files with lint warnings: ${lintWarnings}
              
              Please check the workflow logs for detailed error messages.
              `;
            } else {
              details = `
              ### üìÑ PDF has been generated successfully!
              
              ### Build Statistics
              - Total files processed: ${{ needs.format-and-lint.outputs.total_files }}
              - Python processing completed ‚úÖ
              - All formatting checks passed ‚úÖ
              - All lint checks passed ‚úÖ
              `;
            }

            const comment = `## ${status}

            ${details}

            [View full workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

            // Find any existing comments by the bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Build');
            });

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: latex-logs-build
          path: ${{ inputs.working_directory }}/*.log
